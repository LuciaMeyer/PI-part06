página de la API: ApiPILu* usuario el mail
DB_USER=postgres
DB_PASSWORD=PostgresLu*
DB_HOST=localhost
apikey='b5d0d6eb583547aebcc9043d888d8ca2'
apiGames='https://api.rawg.io/api/games?key='
apiGenres='https://api.rawg.io/api/genres?key='


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Únicos Endpoints/Flags que pueden utilizar:
GET https://api.rawg.io/api/games >> https://api.rawg.io/api/games?key=b5d0d6eb583547aebcc9043d888d8ca2
GET https://api.rawg.io/api/games?search={game}
GET https://api.rawg.io/api/genres >> https://api.rawg.io/api/genres?key=b5d0d6eb583547aebcc9043d888d8ca2
GET https://api.rawg.io/api/games/{id} >> https://api.rawg.io/api/games/3498?key=b5d0d6eb583547aebcc9043d888d8ca2


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DATOS Y ANOTACIONES:

DATABASE:

- controlar el index, funciones de almacenamiento y force: true/false

BACK:

- instalar axios desde la pc del trabajo npm i axios, si uso fetch no es necesario instalar
- controllers --> no hago control de errores en getGenres, ver si es necesario
- routes --> videogames?name=... me falta la lógica de traer las primeras 15 coincidencias
- separar lógica de rutas en get /videogames y /videogames/:id

FRONT:
- instalar extensión de Visual: ES7+ React/Redux/React-Native snippets y con el comando rfc te arma la estructura de un componente
- instalar axios desde la pc del trabajo npm i axios, si uso fetch no es necesario instalar
- Pagina inicial: landing page
- Ruta principal: busqueda, filtrado, paginado, etc
- Ruta de detalle de videojuego
- Ruta de creación de videojuego
